{"version":3,"sources":["logo.svg","components/multi_choice_graph.js","components/chart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MultiChoiceGraph","host","props","randomColor","require","project_activity","project_activity_name","project_activity_graphs","map","graph","md","key","question_id","question_text","layout","width","height","data","question_reponses_graph","margin","top","right","left","bottom","strokeDasharray","type","dataKey","fill","hue","Chart","useState","setData","programmes","setProgrammes","projects","setProjects","project_id","programme_id","startDate","Date","endDate","selectedValues","setSelectedValues","selectProjectHandler","event","console","log","target","value","selectProgrammeHandler","axios","get","then","res","catch","err","useEffect","Group","controlId","Label","Control","as","programme","id","onClick","name","project","onChange","date","style","variant","params","programme_name","project_name","activity","App","fluid","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0895cb92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport * as Rbs from 'react-bootstrap';\nimport DatePicker from \"react-datepicker\";\n\n\nfunction MultiChoiceGraph(props) {\n  var randomColor = require('randomcolor'); // import the script\n  return (\n      <Rbs.Row>\n          <Rbs.Col>\n            <h3> Activity: { props.project_activity.project_activity_name } </h3>\n            <br/>\n              <Rbs.Row>\n              {props.project_activity.project_activity_graphs.map((graph) => (\n                <Rbs.Col md={3} key={graph.question_id}>\n                  <div >\n                    <div>{ graph.question_text }</div>\n                    <BarChart layout=\"vertical\" width={500} height={300} data={graph.question_reponses_graph}\n                      margin={{ top: 5, right: 30, left: 20, bottom: 5,}}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis type=\"number\"/>\n                      <YAxis dataKey=\"option_text\" type=\"category\"/>\n                      <Tooltip />\n                      <Bar dataKey=\"count\" fill={randomColor({hue: 'green'})}/>\n                    </BarChart>\n                  </div>\n                  <br/><br/>\n                </Rbs.Col>\n                ))}\n              </Rbs.Row>\n          </Rbs.Col>\n      </Rbs.Row>\n      )\n}\n\nexport default MultiChoiceGraph;","import React, { useState, useEffect } from 'react';\nimport MultiChoiceGraph from \"./multi_choice_graph.js\"\nimport axios from 'axios';\nimport {\n  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport * as Rbs from 'react-bootstrap';\nimport DatePicker from \"react-datepicker\";\n\n\nlet host;\nhost = \"https://field-backend.truefootprint.com\";\n// if (window.location.hostname === \"localhost\") {\n//   host = \"http://localhost:3000\";\n// } else {\n//   host = \"https://field-backend.truefootprint.com\";\n// }\n\nfunction Chart() {\n\tconst [data, setData] = useState({});\n  const [programmes, setProgrammes] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [selectedValues, setSelectedValues] = useState({project_id: '', programme_id: '', startDate: new Date(), endDate: new Date()})\n\n  useEffect(() => {\n\n      //     axios.get(`http://localhost:3000/reports/20`, {\n      //   params: selectedValues\n      // }).then(res => {\n      //     console.log(\"DATAT\")\n      //     console.log(res.data)\n      //     setData(res.data)\n      //   })\n      //   .catch(err => {\n      //     console.log(err)\n      //   })\n\n    axios.get(`${host}/reports/setup_report_form`)\n        .then(res => {\n          console.log(\"PROGRAMMES\")\n          console.log(res.data.programmes)\n          setProgrammes(res.data.programmes)\n        })\n        .catch(err => {\n          console.log(err)\n        })\n  }, []) // END OF USE EFFECT FOR INTIAL LOAD\n\n  function handleGenerateReport(){\n      console.log(selectedValues)\n      axios.get(`${host}/reports/99`, {\n        params: selectedValues\n      }).then(res => {\n          console.log(\"DATAT\")\n          console.log(res.data)\n          setData(res.data)\n        })\n        .catch(err => {\n          console.log(err)\n        })\n  }\n\n  function selectProjectHandler(event){\n    console.log(event.target.value)\n    setSelectedValues({...selectedValues, project_id: event.target.value})\n  }\n\n  function selectProgrammeHandler(event){\n    console.log(\"SEt programme id\")\n    console.log(event.target.value)\n    setSelectedValues({...selectedValues, programme_id: event.target.value})\n    // get all projects for this programme selected\n    axios.get(`${host}/reports/get_projects_list/${event.target.value}`)\n        .then(res => {\n          console.log(\"PROGRAMMES\")\n          console.log(res.data.projects)\n          setProjects(res.data.projects)\n        })\n        .catch(err => {\n          console.log(err)\n        })\n  }\n\n  return (\n\n\n    <div>\n    <Rbs.Row>\n    <Rbs.Col>\n      <h1>Reports</h1>\n      <p>{host}</p>\n        <Rbs.Form>\n              <Rbs.Form.Group controlId=\"exampleForm.ControlSelect2\">\n              <Rbs.Row>\n                <Rbs.Col>\n                  <Rbs.Form.Label>Programmes</Rbs.Form.Label>\n                  <Rbs.Form.Control as=\"select\">\n                  {programmes && programmes.map((programme) => (\n                    <option key={programme.id} value={programme.id} onClick={selectProgrammeHandler}>\n                      {programme.name}\n                    </option>\n                  ))}\n                  </Rbs.Form.Control>\n                </Rbs.Col>\n                <Rbs.Col>\n                  <Rbs.Form.Label>Projects</Rbs.Form.Label>\n                  <Rbs.Form.Control as=\"select\">\n                    <option value=\"\" onClick={selectProjectHandler}> All</option>\n                  {projects && projects.map((project) => (\n                    <option key={project.id} value={project.id} onClick={selectProjectHandler}>\n                      {project.name}\n                    </option>\n                  ))}\n                  </Rbs.Form.Control>\n                </Rbs.Col>\n                <Rbs.Col>\n                  <Rbs.Form.Label>Start date</Rbs.Form.Label>\n                  <Rbs.FormControl onChange={date => setSelectedValues({...selectedValues, startDate: date.target.value})} type=\"date\" style={{width:'100%'}}/>\n                </Rbs.Col>\n                <Rbs.Col>\n                  <Rbs.Form.Label>End date</Rbs.Form.Label>\n                  <Rbs.FormControl onChange={date => setSelectedValues({...selectedValues, endDate: date.target.value})} type=\"date\" style={{width:'100%'}}/>\n                </Rbs.Col>\n                <Rbs.Col>\n                  <Rbs.Button variant=\"primary\" onClick={handleGenerateReport}>Generate Report</Rbs.Button>\n                </Rbs.Col>\n              </Rbs.Row>\n              </Rbs.Form.Group>\n        </Rbs.Form>\n    </Rbs.Col>\n    </Rbs.Row>\n\n    <Rbs.Row>\n      <Rbs.Col>\n        <h2> Programme name: {data.programme_name} </h2>\n        <h3> Project name: {data.project_name} </h3>\n      </Rbs.Col>\n    </Rbs.Row>\n    <br/>\n\n    {data.activity && data.activity.map((project_activity) => (\n      <MultiChoiceGraph key={project_activity.project_activity_name} project_activity={project_activity}/>\n    ))}\n\n\n    </div>\n  \t);\n\n\n}\n\nexport default Chart;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chart from \"./components/chart.js\"\nimport * as Rbs from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n  \t<Rbs.Container fluid>\n  \t<Rbs.Row>\n\t    <Rbs.Col>\n\t\t    <div className=\"App\">\n\t\t      <Chart />\n\t\t    </div>\n\t    </Rbs.Col>\n    </Rbs.Row>\n    </Rbs.Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}